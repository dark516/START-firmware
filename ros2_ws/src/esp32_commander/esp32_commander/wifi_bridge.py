#!/usr/bin/env python3
import rclpy
from rclpy.node import Node
import socket
from geometry_msgs.msg import Twist
from std_msgs.msg import Int32
from sensor_msgs.msg import Imu
import math

class ESP32Commander(Node):
    def __init__(self):
        super().__init__('esp32_commander')

        # --- –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è ---
        self.declare_parameter('host', '10.115.122.247')
        self.declare_parameter('port', 3333)
        host = self.get_parameter('host').value
        port = int(self.get_parameter('port').value)

        # --- TCP —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ ---
        self.sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        try:
            self.sock.connect((host, port))
            self.sock.setblocking(False)
            self.get_logger().info(f'‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ ESP32 ({host}:{port})')
        except Exception as e:
            self.get_logger().error(f'‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è: {e}')
            rclpy.shutdown()
            return

        # --- –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ cmd_vel ---
        self.sub_cmd = self.create_subscription(Twist, '/cmd_vel', self.cmd_callback, 10)

        # --- –ü—É–±–ª–∏–∫–∞—Ü–∏–∏ ---
        self.pub_left = self.create_publisher(Int32, '/left_motor/encoder/delta', 10)
        self.pub_right = self.create_publisher(Int32, '/right_motor/encoder/delta', 10)
        self.pub_imu = self.create_publisher(Imu, '/imu/bno055', 10)

        # --- –¢–∞–π–º–µ—Ä –æ–ø—Ä–æ—Å–∞ ESP32 ---
        self.create_timer(0.05, self.read_from_esp)  # 20 –ì—Ü

        # --- –ü—Ä–µ–¥—ã–¥—É—â–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è —ç–Ω–∫–æ–¥–µ—Ä–æ–≤ (–∞–±—Å–æ–ª—é—Ç–Ω—ã–µ —Å ESP32) ---
        self.prev_left = None
        self.prev_right = None

        # --- RX-–±—É—Ñ–µ—Ä –¥–ª—è –ø–æ—Å—Ç—Ä–æ—á–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ ---
        self._rx_buf = ""

        # --- –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –Ω–∞ –º–∞–∫—Å–∏–º—É–º —Ç–∏–∫–æ–≤ –∑–∞ –æ–¥–∏–Ω –∞–ø–¥–µ–π—Ç (–∞–Ω—Ç–∏—à—É–º) ---
        self.max_delta_ticks = 1000  # –ø–æ–¥—Å—Ç—Ä–æ–π –ø–æ–¥ —Å–≤–æ–π —Ä–æ–±–æ—Ç

    # === –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–º–∞–Ω–¥ ===
    def cmd_callback(self, msg: Twist):
        try:
            line = f"{msg.linear.x:.3f} {msg.angular.z:.3f}\n"
            self.sock.sendall(line.encode('utf-8'))
            self.get_logger().info(f"‚û° –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {line.strip()}")
        except Exception as e:
            self.get_logger().warn(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ: {e}")

    # === –ü—Ä–∏—ë–º –¥–∞–Ω–Ω—ã—Ö –æ—Ç ESP32 ===
    def read_from_esp(self):
        try:
            while True:
                try:
                    data = self.sock.recv(1024)
                except BlockingIOError:
                    break  # –¥–∞–Ω–Ω—ã—Ö –±–æ–ª—å—à–µ –Ω–µ—Ç

                if not data:
                    return

                self._rx_buf += data.decode('utf-8', errors='ignore')
                while '\n' in self._rx_buf:
                    line, self._rx_buf = self._rx_buf.split('\n', 1)
                    self._handle_line(line.strip())

        except Exception as e:
            self.get_logger().error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏: {e}")

    def _handle_line(self, line: str):
        if not line:
            return
        parts = line.split()
        if len(parts) < 2:
            self.get_logger().debug(f"–ù–µ–ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—Ç ESP32: '{line}'")
            return

        try:
            left_abs = int(parts[0])
            right_abs = int(parts[1])
            yaw_deg = int(parts[2]) if len(parts) >= 3 else None
            x_accel = float(parts[3]) if len(parts) >= 4 else None

            # –î–µ–ª—å—Ç—ã —ç–Ω–∫–æ–¥–µ—Ä–æ–≤ –∏–∑ –∞–±—Å–æ–ª—é—Ç–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
            if self.prev_left is None or self.prev_right is None:
                delta_left = 0
                delta_right = 0
            else:
                delta_left = left_abs - self.prev_left
                delta_right = right_abs - self.prev_right

            self.prev_left = left_abs
            self.prev_right = right_abs

            # –°–∞–Ω–∏—Ç–∏-—á–µ–∫
            if abs(delta_left) > self.max_delta_ticks or abs(delta_right) > self.max_delta_ticks:
                self.get_logger().warn(f"‚ö†Ô∏è –û—Ç–±—Ä–æ—à–µ–Ω—ã –∞–Ω–æ–º–∞–ª—å–Ω—ã–µ —Ç–∏–∫–∏: ŒîL={delta_left}, ŒîR={delta_right} (raw line: '{line}')")
                return

            # –ü—É–±–ª–∏–∫–∞—Ü–∏—è –¥–µ–ª—å—Ç
            self.pub_left.publish(Int32(data=delta_left))
            self.pub_right.publish(Int32(data=delta_right))

            # –ü—É–±–ª–∏–∫–∞—Ü–∏—è IMU (–µ—Å–ª–∏ –µ—Å—Ç—å yaw)
            if yaw_deg is not None:
                imu_msg = Imu()
                imu_msg.header.stamp = self.get_clock().now().to_msg()
                imu_msg.header.frame_id = "imu_link"

                # –£—Å–∫–æ—Ä–µ–Ω–∏–µ (–µ—Å–ª–∏ –ø—Ä–∏—à–ª–æ)
                if x_accel is not None:
                    imu_msg.linear_acceleration.x = x_accel
                    imu_msg.linear_acceleration.y = 0.0
                    imu_msg.linear_acceleration.z = 0.0

                # –ö–≤–∞—Ç–µ—Ä–Ω–∏–æ–Ω –∏–∑ yaw
                yaw_rad = math.radians(float(yaw_deg))
                imu_msg.orientation.x = 0.0
                imu_msg.orientation.y = 0.0
                imu_msg.orientation.z = math.sin(yaw_rad / 2.0)
                imu_msg.orientation.w = math.cos(yaw_rad / 2.0)

                self.pub_imu.publish(imu_msg)

            self.get_logger().info(f"üì° ŒîL={delta_left}, ŒîR={delta_right}, Yaw={yaw_deg if yaw_deg is not None else '-'}¬∞, "
                                   f"X_Accel={x_accel:.3f} m/s¬≤" if x_accel is not None else "")

        except ValueError:
            self.get_logger().debug(f"–ü–æ–ª—É—á–µ–Ω—ã –Ω–µ—á–∏—Å–ª–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ: '{line}'")
            return

    def destroy_node(self):
        try:
            self.sock.close()
        except Exception:
            pass
        self.get_logger().info("‚ùå –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ")
        super().destroy_node()

def main(args=None):
    rclpy.init(args=args)
    node = ESP32Commander()
    try:
        rclpy.spin(node)
    except KeyboardInterrupt:
        pass
    finally:
        if rclpy.ok():
            node.destroy_node()
            rclpy.shutdown()

if __name__ == '__main__':
    main()