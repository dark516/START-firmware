#!/usr/bin/env python3
import rclpy
from rclpy.node import Node
import socket
from geometry_msgs.msg import Twist
from std_msgs.msg import Int32


class ESP32Commander(Node):
    def __init__(self):
        super().__init__('esp32_commander')
        self.get_logger().error(f'privet')
        # --- –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è ---
        self.declare_parameter('host', '192.168.106.201')
        self.declare_parameter('port', 3333)

        host = self.get_parameter('host').value
        port = self.get_parameter('port').value

        # --- TCP —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ ---
        self.sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        try:
            self.sock.connect((host, port))
            self.get_logger().info(f'‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ ESP32 ({host}:{port})')
        except Exception as e:
            self.get_logger().error(f'‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è: {e}')
            rclpy.shutdown()
            return

        # --- –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ cmd_vel ---
        self.sub_cmd = self.create_subscription(Twist, 'cmd_vel', self.cmd_callback, 10)

        # --- –ü—É–±–ª–∏–∫–∞—Ü–∏–∏ ---
        self.pub_left = self.create_publisher(Int32, '/encoder_left', 10)
        self.pub_right = self.create_publisher(Int32, '/encoder_right', 10)
        self.pub_yaw = self.create_publisher(Int32, '/gyro_yaw', 10)

        # --- –¢–∞–π–º–µ—Ä –æ–ø—Ä–æ—Å–∞ ESP32 ---
        self.create_timer(0.05, self.read_from_esp)

        # --- –ü—Ä–µ–¥—ã–¥—É—â–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è —ç–Ω–∫–æ–¥–µ—Ä–æ–≤ ---
        self.prev_left = None
        self.prev_right = None

    # === –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–º–∞–Ω–¥ ===
    def cmd_callback(self, msg: Twist):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ª–∏–Ω–µ–π–Ω—É—é –∏ —É–≥–ª–æ–≤—É—é —Å–∫–æ—Ä–æ—Å—Ç—å –Ω–∞ ESP32"""
        try:
            line = f"{msg.linear.x:.3f} {msg.angular.z:.3f}\n"
            self.sock.sendall(line.encode())
            self.get_logger().info(f"‚û° –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {line.strip()}")
        except Exception as e:
            self.get_logger().warn(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ: {e}")

    # === –ü—Ä–∏—ë–º –¥–∞–Ω–Ω—ã—Ö –æ—Ç ESP32 ===
    def read_from_esp(self):
        """–ß–∏—Ç–∞–µ–º —Ç–∏–∫–∏ –∏ yaw —Å ESP32, –ø—É–±–ª–∏–∫—É–µ–º –¥–µ–ª—å—Ç—ã –∏ yaw"""
        try:
            self.sock.setblocking(False)
            try:
                data = self.sock.recv(64)
            except BlockingIOError:
                return  # –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç

            if not data:
                return

            line = data.decode().strip()
            if not line:
                return

            parts = line.split()
            if len(parts) >= 3:  # –æ–∂–∏–¥–∞–µ–º: left right yaw
                try:
                    left = int(parts[0])
                    right = int(parts[1])
                    yaw = int(parts[2])
                    
                    # –í—ã—á–∏—Å–ª—è–µ–º –¥–µ–ª—å—Ç—ã —ç–Ω–∫–æ–¥–µ—Ä–æ–≤
                    if self.prev_left is not None and self.prev_right is not None:
                        delta_left = left - self.prev_left
                        delta_right = right - self.prev_right
                    else:
                        delta_left = 0
                        delta_right = 0

                    self.prev_left = left
                    self.prev_right = right

                    # –ü—É–±–ª–∏–∫—É–µ–º
                    self.pub_left.publish(Int32(data=delta_left))
                    self.pub_right.publish(Int32(data=delta_right))
                    self.pub_yaw.publish(Int32(data=yaw))

                    self.get_logger().info(f"üì° ŒîL={delta_left}, ŒîR={delta_right}, Yaw={yaw}")
                except ValueError:
                    # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫–∏ —Å –Ω–µ—á–∏—Å–ª–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
                    self.get_logger().debug(f"–ü–æ–ª—É—á–µ–Ω—ã –Ω–µ—á–∏—Å–ª–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ: {line}")
                    return
            else:
                # –õ–æ–≥–∏—Ä—É–µ–º –Ω–µ–ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
                self.get_logger().debug(f"–ù–µ–ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—Ç ESP32: {line}")

        except Exception as e:
            self.get_logger().error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏: {e}")

    def destroy_node(self):
        self.sock.close()
        self.get_logger().info("‚ùå –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ")
        super().destroy_node()


def main(args=None):
    rclpy.init(args=args)
    node = ESP32Commander()
    try:
        rclpy.spin(node)
    except KeyboardInterrupt:
        pass
    finally:
        if rclpy.ok():
            node.destroy_node()
            rclpy.shutdown()


if __name__ == '__main__':
    main()

