#!/usr/bin/env python3
import rclpy
from rclpy.node import Node
import socket
import struct
import math
from sensor_msgs.msg import LaserScan
from threading import Thread, Lock
import time

class RPLidarBridge(Node):
    """
    –ü—Ä–æ–∑—Ä–∞—á–Ω—ã–π –º–æ—Å—Ç –¥–ª—è RPLidar C1 —á–µ—Ä–µ–∑ ESP32.
    –ü–æ–ª—É—á–∞–µ—Ç —Å—ã—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ TCP, –ø–∞—Ä—Å–∏—Ç –ø—Ä–æ—Ç–æ–∫–æ–ª RPLidar –∏ –ø—É–±–ª–∏–∫—É–µ—Ç LaserScan.
    """
    
    def __init__(self):
        super().__init__('rplidar_bridge')
        
        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        self.declare_parameter('host', '10.115.122.247')
        self.declare_parameter('port', 3334)
        self.declare_parameter('frame_id', 'laser')
        self.declare_parameter('angle_min', 0.0)
        self.declare_parameter('angle_max', 6.28318)  # 2*pi
        self.declare_parameter('range_min', 0.15)
        self.declare_parameter('range_max', 12.0)
        self.declare_parameter('scan_frequency', 10.0)  # –ì—Ü
        
        host = self.get_parameter('host').value
        port = int(self.get_parameter('port').value)
        self.frame_id = self.get_parameter('frame_id').value
        self.range_min = float(self.get_parameter('range_min').value)
        self.range_max = float(self.get_parameter('range_max').value)
        
        # TCP –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ ESP32
        self.sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        try:
            self.sock.connect((host, port))
            self.get_logger().info(f'‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ ESP32 LIDAR bridge ({host}:{port})')
        except Exception as e:
            self.get_logger().error(f'‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è: {e}')
            rclpy.shutdown()
            return
        
        # –ü—É–±–ª–∏–∫–∞—Ç–æ—Ä LaserScan
        self.scan_pub = self.create_publisher(LaserScan, '/scan', 10)
        
        # –î–∞–Ω–Ω—ã–µ –¥–ª—è –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è —Å–∫–∞–Ω–∞
        self.scan_data = {}  # {angle_deg: (distance_m, quality)}
        self.scan_lock = Lock()
        self.last_publish_time = time.time()
        self.scan_period = 1.0 / float(self.get_parameter('scan_frequency').value)
        
        # –ó–∞–ø—É—Å–∫ –ø–æ—Ç–æ–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö
        self.running = True
        self.thread = Thread(target=self.receive_loop, daemon=True)
        self.thread.start()
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ª–∏–¥–∞—Ä–∞
        self.init_lidar()
        
        self.get_logger().info('üî¥ RPLidar Bridge –∑–∞–ø—É—â–µ–Ω!')
    
    def init_lidar(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏ –∑–∞–ø—É—Å–∫ –ª–∏–¥–∞—Ä–∞"""
        try:
            time.sleep(0.5)
            
            # STOP (–µ—Å–ª–∏ —Ä–∞–±–æ—Ç–∞–ª)
            self.send_command([0xA5, 0x25])
            time.sleep(0.1)
            
            # RESET
            self.send_command([0xA5, 0x40])
            time.sleep(2.0)
            
            # GET_INFO (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ, –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏)
            # self.send_command([0xA5, 0x50])
            # time.sleep(0.5)
            
            # SCAN (—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ)
            self.send_command([0xA5, 0x20])
            time.sleep(0.5)
            
            self.get_logger().info('‚úÖ –õ–∏–¥–∞—Ä –∑–∞–ø—É—â–µ–Ω –≤ —Ä–µ–∂–∏–º–µ SCAN')
        except Exception as e:
            self.get_logger().error(f'–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ª–∏–¥–∞—Ä–∞: {e}')
    
    def send_command(self, cmd_bytes):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–º–∞–Ω–¥—ã –ª–∏–¥–∞—Ä—É"""
        try:
            self.sock.send(bytes(cmd_bytes))
        except Exception as e:
            self.get_logger().error(f'–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–º–∞–Ω–¥—ã: {e}')
    
    def receive_loop(self):
        """–ì–ª–∞–≤–Ω—ã–π —Ü–∏–∫–ª –ø—Ä–∏—ë–º–∞ –¥–∞–Ω–Ω—ã—Ö"""
        buffer = b''
        
        while self.running and rclpy.ok():
            try:
                # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ
                data = self.sock.recv(4096)
                if not data:
                    self.get_logger().warn('–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ')
                    break
                
                buffer += data
                
                # –ü–∞—Ä—Å–∏–º –±—É—Ñ–µ—Ä
                buffer = self.parse_buffer(buffer)
                
            except socket.timeout:
                continue
            except Exception as e:
                self.get_logger().error(f'–û—à–∏–±–∫–∞ –ø—Ä–∏—ë–º–∞: {e}')
                time.sleep(0.1)
    
    def parse_buffer(self, buffer):
        """–ü–∞—Ä—Å–∏–Ω–≥ –ø—Ä–æ—Ç–æ–∫–æ–ª–∞ RPLidar"""
        while len(buffer) >= 5:
            # –ò—â–µ–º –Ω–∞—á–∞–ª–æ –ø–∞–∫–µ—Ç–∞ –∏–∑–º–µ—Ä–µ–Ω–∏—è
            # –§–æ—Ä–º–∞—Ç: [START_FLAG1 | START_FLAG2 | (6bit_Quality | 2bit_flags) | angle_low | angle_high | distance_low | distance_high ]
            # START_FLAG1 = 0xXX (–∑–∞–≤–∏—Å–∏—Ç –æ—Ç S bit)
            # START_FLAG2 = 0xXX
            
            # –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ –¥–ª—è RPLidar A1/C1 (—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Ä–µ–∂–∏–º)
            # –ë–∞–π—Ç 0: [S | !S | C | angle[14]]
            # S = 1 –µ—Å–ª–∏ –Ω–∞—á–∞–ª–æ –Ω–æ–≤–æ–≥–æ —Å–∫–∞–Ω–∞
            # C = 1 –µ—Å–ª–∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ failed (–∫–∞—á–µ—Å—Ç–≤–æ –ø–ª–æ—Ö–æ–µ)
            
            byte0 = buffer[0]
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –ø–µ—Ä–≤–æ–≥–æ –±–∞–π—Ç–∞
            start_bit = (byte0 >> 0) & 0x01
            not_start_bit = (byte0 >> 1) & 0x01
            
            # –í–∞–ª–∏–¥–∞—Ü–∏—è: start_bit –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∏–Ω–≤–µ—Ä—Å–∏–µ–π not_start_bit
            if start_bit == not_start_bit:
                # –ù–µ–≤–∞–ª–∏–¥–Ω—ã–π –ø–∞–∫–µ—Ç, —Å–¥–≤–∏–≥–∞–µ–º –±—É—Ñ–µ—Ä
                buffer = buffer[1:]
                continue
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–∞–∫–µ—Ç–∞
            if len(buffer) < 5:
                break
            
            # –ü–∞—Ä—Å–∏–º –ø–∞–∫–µ—Ç (5 –±–∞–π—Ç)
            quality = (byte0 >> 2) & 0x3F  # 6 –±–∏—Ç –∫–∞—á–µ—Å—Ç–≤–∞ (–¥–ª—è –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö –º–æ–¥–µ–ª–µ–π)
            check_bit = (byte0 >> 1) & 0x01
            new_scan = start_bit
            
            # –£–≥–æ–ª (15 –±–∏—Ç, 1/64 –≥—Ä–∞–¥—É—Å–∞)
            angle_q6 = buffer[1] | ((buffer[2] << 8))
            angle_deg = (angle_q6 >> 1) / 64.0
            
            # –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ (14 –±–∏—Ç, 1/4 –º–º)
            distance_q2 = buffer[3] | ((buffer[4] << 8))
            distance_mm = (distance_q2 >> 2) / 4.0
            distance_m = distance_mm / 1000.0
            
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö
            if new_scan:
                # –ü—É–±–ª–∏–∫—É–µ–º –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—ã–π —Å–∫–∞–Ω
                self.publish_scan()
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ—á–∫—É –≤ —Ç–µ–∫—É—â–∏–π —Å–∫–∞–Ω
            if distance_m > 0.01:  # –§–∏–ª—å—Ç—Ä —à—É–º–∞
                with self.scan_lock:
                    # –û–∫—Ä—É–≥–ª—è–µ–º —É–≥–æ–ª –¥–æ —Ü–µ–ª–æ–≥–æ –≥—Ä–∞–¥—É—Å–∞
                    angle_int = int(angle_deg) % 360
                    self.scan_data[angle_int] = (distance_m, quality)
            
            # –£–±–∏—Ä–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π –ø–∞–∫–µ—Ç
            buffer = buffer[5:]
        
        return buffer
    
    def publish_scan(self):
        """–ü—É–±–ª–∏–∫–∞—Ü–∏—è LaserScan —Å–æ–æ–±—â–µ–Ω–∏—è"""
        with self.scan_lock:
            if not self.scan_data:
                return
            
            # –°–æ–∑–¥–∞—ë–º LaserScan
            scan_msg = LaserScan()
            scan_msg.header.stamp = self.get_clock().now().to_msg()
            scan_msg.header.frame_id = self.frame_id
            
            scan_msg.angle_min = 0.0
            scan_msg.angle_max = 2.0 * math.pi
            scan_msg.angle_increment = math.radians(1.0)  # 1 –≥—Ä–∞–¥—É—Å
            scan_msg.time_increment = 0.0
            scan_msg.scan_time = self.scan_period
            scan_msg.range_min = self.range_min
            scan_msg.range_max = self.range_max
            
            # –ó–∞–ø–æ–ª–Ω—è–µ–º –º–∞—Å—Å–∏–≤—ã
            ranges = [0.0] * 360
            intensities = [0.0] * 360
            
            for angle_deg, (distance, quality) in self.scan_data.items():
                idx = angle_deg % 360
                ranges[idx] = distance if self.range_min <= distance <= self.range_max else 0.0
                intensities[idx] = float(quality)
            
            scan_msg.ranges = ranges
            scan_msg.intensities = intensities
            
            # –ü—É–±–ª–∏–∫—É–µ–º
            self.scan_pub.publish(scan_msg)
            
            # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ
            self.scan_data.clear()
            self.last_publish_time = time.time()
    
    def destroy_node(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏ –∑–∞–∫—Ä—ã—Ç–∏–µ"""
        self.running = False
        try:
            # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ª–∏–¥–∞—Ä
            self.send_command([0xA5, 0x25])  # STOP
            time.sleep(0.1)
            self.sock.close()
        except:
            pass
        self.get_logger().info('üî¥ LIDAR Bridge –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω')
        super().destroy_node()

def main(args=None):
    rclpy.init(args=args)
    node = RPLidarBridge()
    try:
        rclpy.spin(node)
    except KeyboardInterrupt:
        pass
    finally:
        if rclpy.ok():
            node.destroy_node()
            rclpy.shutdown()

if __name__ == '__main__':
    main()